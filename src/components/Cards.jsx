import styles from '../styles/App.module.scss'
import Card from './Card'
import Loader from './Loader'
import {
  setBasketItems,
  incrementAmountItem,
} from '../redux/slices/basketSlice'
import { useSelector, useDispatch } from 'react-redux'

const Cards = () => {
  const fetchStatus = useSelector((state) => state.pizzasSlice.status)
  const searchText = useSelector((state) => state.searchSlice.isSearch)
  const basketItems = useSelector((state) => state.basketSlice.basketItems)
  const data = useSelector((state) => state.pizzasSlice.data)
  const dispatch = useDispatch()

  const addItemInBasket = (objPizza) => {
    if (basketItems.length !== 0) {
      // –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
      // —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—Å–∫–ª—é—á–∞–µ–º amount
      const prop = Object.getOwnPropertyNames(objPizza).filter(
        (el) => el !== 'amount'
      )
      // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
      for (let i = 0; i < basketItems.length; i++) {
        let trueCounter = 0 // —Å—á–µ—Ç—á–∏–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

        for (let j = 0; j < prop.length; j++) {
          // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Å–≤–æ–π—Å—Ç–≤–∞–º
          if (basketItems[i][prop[j]] === objPizza[prop[j]]) {
            trueCounter++ // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å—á–µ—Ç—á–∏–∫
          }
        }

        // –µ—Å–ª–∏ —Å–æ–≤–µ–ø–∞–¥–µ–Ω–∏–π —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –∏ —Å–∞–º–∏—Ö —Å–≤–æ–π—Å—Ç–≤
        if (trueCounter === prop.length) {
          dispatch(incrementAmountItem(i))
          return
        }

        // –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
        if (trueCounter !== prop.length && i === basketItems.length - 1) {
          dispatch(setBasketItems(objPizza))
        }
      }
    } else {
      // –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
      dispatch(setBasketItems(objPizza))
    }
  }

  return (
    <section className={styles.items}>
      {!!searchText ? <h2>–ü–æ–∏—Å–∫: {searchText}</h2> : <h2>–í—Å–µ –ø–∏—Ü—Ü—ã</h2>}
      <div className={styles.cards}>
        {fetchStatus === 'error' && (
          <h1 className={styles.fetchError}>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üòï</h1>
        )}

        {fetchStatus === 'loading' &&
          [...new Array(6)].map((_el, id) => <Loader key={id} />)}

        {fetchStatus === 'success' && data.length ? (
          data.map((el, id) => (
            <Card
              key={id}
              card={el}
              pizzaBasket={(objPizza) => addItemInBasket(objPizza)}
            />
          ))
        ) : (
          <h1 className={styles.fetchError}>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï</h1>
        )}
      </div>
    </section>
  )
}

export default Cards
